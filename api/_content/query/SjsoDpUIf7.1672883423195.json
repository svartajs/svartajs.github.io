[{"_path":"/guide/contribute","_dir":"guide","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Contribute","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"contribute"},"children":[{"type":"text","value":"Contribute"}]},{"type":"element","tag":"h2","props":{"id":"setup-repository"},"children":[{"type":"text","value":"Setup repository"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Fork and clone the repository"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Make sure "},{"type":"element","tag":"a","props":{"href":"https://pnpm.io","rel":["nofollow"]},"children":[{"type":"text","value":"PNPM"}]},{"type":"text","value":" is installed"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Install dependencies with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"pnpm install"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Create a new branch"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Add your changes"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"pnpm lint -- --fix"}]},{"type":"text","value":" to check & automatically fix your code"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"pnpm test"}]},{"type":"text","value":" to run tests"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Commit & push your changes"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Create a pull request "},{"type":"element","tag":"a","props":{"href":"https://github.com/svartajs/svarta/pulls","rel":["nofollow"]},"children":[{"type":"text","value":"here"}]}]}]},{"type":"element","tag":"h2","props":{"id":"rundown-of-packages"},"children":[{"type":"text","value":"Rundown of packages"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The repository is a monorepo using "},{"type":"element","tag":"a","props":{"href":"https://pnpm.io/workspaces","rel":["nofollow"]},"children":[{"type":"text","value":"PNPM workspaces"}]},{"type":"text","value":" and "},{"type":"element","tag":"a","props":{"href":"https://turbo.build/repo","rel":["nofollow"]},"children":[{"type":"text","value":"Turborepo"}]},{"type":"text","value":". The packages are as follows:"}]},{"type":"element","tag":"h3","props":{"id":"core"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"core"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This package contains most type definitions and functionality that will be used in the other packages."}]},{"type":"element","tag":"h3","props":{"id":"svarta"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"svarta"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is the main user facing package and exports the most important utility, like "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Response"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"route"}]},{"type":"text","value":" etc from "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"core"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h3","props":{"id":"cli"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"cli"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is the "},{"type":"element","tag":"a","props":{"href":"/usage/cli"},"children":[{"type":"text","value":"command line tool"}]},{"type":"text","value":", which provides commands like "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"dev"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"build"}]},{"type":"text","value":" etc."}]},{"type":"element","tag":"h3","props":{"id":"dev-server"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"dev-server"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is the "},{"type":"element","tag":"a","props":{"href":"https://nitro.unjs.io/","rel":["nofollow"]},"children":[{"type":"text","value":"nitro-powered"}]},{"type":"text","value":" development server that will be invoked using "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"svarta dev"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h3","props":{"id":"create-svarta-app"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"create-svarta-app"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is the scaffolding tool, see "},{"type":"element","tag":"a","props":{"href":"/guide/quickstart"},"children":[{"type":"text","value":"Quickstart"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h3","props":{"id":"adapter-standalone"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"adapter-standalone"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is the standalone adapter, powered by "},{"type":"element","tag":"a","props":{"href":"https://tinyhttp.v1rtl.site/","rel":["nofollow"]},"children":[{"type":"text","value":"tinyhttp"}]},{"type":"text","value":". See "},{"type":"element","tag":"a","props":{"href":"/adapters"},"children":[{"type":"text","value":"Adapters"}]},{"type":"text","value":" for more info."}]}]},"_type":"markdown","_id":"content:1.guide:2.contribute.md","_source":"content","_file":"1.guide/2.contribute.md","_extension":"md"},{"_path":"/usage/middlewares","_dir":"usage","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Middlewares","description":"To create a middleware, use route.middleware. The callback is your middleware function and can access all the info a route can. By returning an object you can add context your route can later consume.","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"middlewares"},"children":[{"type":"text","value":"Middlewares"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To create a middleware, use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"route.middleware"}]},{"type":"text","value":". The callback is your middleware function and can access all the info a route can. By returning an object you can add context your route can later consume."}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"import { Response, route, Status } from \"svarta\";\n\nconst protectedRoute = route.middleware(async ({ headers, ctx }) => {\n  const authHeader = headers.get(\"authorization\");\n\n  if (!authHeader) {\n    return new Response(Status.Unauthorized);\n  }\n\n  const user = await getUser(authHeader);\n\n  return {\n    ...ctx,\n    user,\n  };\n});\n\nexport default protectedRoute.handle(async ({ ctx }) => {\n  return new Response(Status.Ok, {\n    user: ctx.user,\n  });\n});\n","filename":"routes/index.get.ts","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { Response, route, Status } from \"svarta\";\n\nconst protectedRoute = route.middleware(async ({ headers, ctx }) => {\n  const authHeader = headers.get(\"authorization\");\n\n  if (!authHeader) {\n    return new Response(Status.Unauthorized);\n  }\n\n  const user = await getUser(authHeader);\n\n  return {\n    ...ctx,\n    user,\n  };\n});\n\nexport default protectedRoute.handle(async ({ ctx }) => {\n  return new Response(Status.Ok, {\n    user: ctx.user,\n  });\n});\n"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"chaining-middlewares"},"children":[{"type":"text","value":"Chaining middlewares"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can chain middlewares by calling "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".middleware"}]},{"type":"text","value":" on another middleware. This will return a new middleware."}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"import { Response, route, Status } from \"svarta\";\n\n// See example above for \"protectedRoute\"\nconst signedRoute = protectedRoute.middleware(async ({ headers, ctx }) => {\n  headers.set(\"x-my-header\", \"abc\");\n  return ctx;\n})\n\nexport default signedRoute.handle(async ({ ctx }) => {\n  return new Response(Status.Ok, {\n    user: ctx.user,\n  });\n});\n","filename":"routes/index.get.ts","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { Response, route, Status } from \"svarta\";\n\n// See example above for \"protectedRoute\"\nconst signedRoute = protectedRoute.middleware(async ({ headers, ctx }) => {\n  headers.set(\"x-my-header\", \"abc\");\n  return ctx;\n})\n\nexport default signedRoute.handle(async ({ ctx }) => {\n  return new Response(Status.Ok, {\n    user: ctx.user,\n  });\n});\n"}]}]}]}]}]},"_type":"markdown","_id":"content:2.usage:1.middlewares.md","_source":"content","_file":"2.usage/1.middlewares.md","_extension":"md"}]