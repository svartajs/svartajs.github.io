[{"_path":"/usage/routes","_dir":"usage","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Routes","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"routes"},"children":[{"type":"text","value":"Routes"}]},{"type":"element","tag":"h2","props":{"id":"file-based-routing"},"children":[{"type":"text","value":"File-based routing"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In your "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"routes"}]},{"type":"text","value":" folder (can be changed in the configuration), you can create new files to map to specific routes. Route files are formatted as follows:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"index.get.ts"}]},{"type":"text","value":" maps to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"user.get.ts"}]},{"type":"text","value":" maps to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /user"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"user/index.get.ts"}]},{"type":"text","value":" also maps to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /user"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"hello/[name].get.ts"}]},{"type":"text","value":" maps to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /hello/[name]"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"index.post.ts"}]},{"type":"text","value":" maps to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"POST /"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"etc."}]},{"type":"element","tag":"h2","props":{"id":"route-handling"},"children":[{"type":"text","value":"Route handling"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To create a route, default export a route handler by calling "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"route.handle"}]},{"type":"text","value":"."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"route"}]},{"type":"text","value":" is the default route entry point and can be extended using "},{"type":"element","tag":"a","props":{"href":"/usage/middlewares"},"children":[{"type":"text","value":"middlewares"}]}]}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"import { Response, route, Status } from \"svarta\";\n\nexport default route.handle(async () => {\n  return new Response(Status.Ok, \"Hello world!\");\n});\n","filename":"routes/index.get.ts","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { Response, route, Status } from \"svarta\";\n\nexport default route.handle(async () => {\n  return new Response(Status.Ok, \"Hello world!\");\n});\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To send a response, use the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Response"}]},{"type":"text","value":" class."}]},{"type":"element","tag":"h2","props":{"id":"input-validation"},"children":[{"type":"text","value":"Input validation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To validate the request body, use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"route.input"}]},{"type":"text","value":"."}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"export default route\n  .input(\n    zod\n      .object({ name: zod.string() })\n      .strict()\n  )\n  .handle(async ({ input }) => {\n    return new Response(Status.Ok, {\n      // input is type-safe \n      message: `Hello ${input.name}`\n    });\n  });\n","filename":"routes/index.post.ts","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"export default route\n  .input(\n    zod\n      .object({ name: zod.string() })\n      .strict()\n  )\n  .handle(async ({ input }) => {\n    return new Response(Status.Ok, {\n      // input is type-safe \n      message: `Hello ${input.name}`\n    });\n  });\n"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"route-parameters"},"children":[{"type":"text","value":"Route parameters"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Consider this route, which should greet the user using the name given in the route path."}]},{"type":"element","tag":"alert","props":{"type":"warning"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This will not build, as params are unknown by default."}]}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"import { Response, route, Status } from \"svarta\";\n\nexport default route\n  .handle(async ({ params }) => {\n    const { name } = params; // Error: 'params' is of type 'unknown'\n\n    return new Response(Status.Ok, {\n      message: `Hello ${name}!`,\n    });\n  });\n","filename":"routes/hello/[name].get.ts","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { Response, route, Status } from \"svarta\";\n\nexport default route\n  .handle(async ({ params }) => {\n    const { name } = params; // Error: 'params' is of type 'unknown'\n\n    return new Response(Status.Ok, {\n      message: `Hello ${name}!`,\n    });\n  });\n"}]}]}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"alert","props":{"type":"success"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To statically validate parameters, export a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"params"}]},{"type":"text","value":" array and add it to the handler."}]}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"import { Response, route, Status } from \"svarta\";\n\nexport const params = [\"name\"] as const;\n\nexport default route\n  .params(params) // <- register params\n  .handle(async ({ params }) => {\n    const { name } = params; // OK!\n\n    return new Response(Status.Ok, {\n      message: `Hello ${name}!`,\n    });\n  });\n","filename":"routes/hello/[name].get.ts","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { Response, route, Status } from \"svarta\";\n\nexport const params = [\"name\"] as const;\n\nexport default route\n  .params(params) // <- register params\n  .handle(async ({ params }) => {\n    const { name } = params; // OK!\n\n    return new Response(Status.Ok, {\n      message: `Hello ${name}!`,\n    });\n  });\n"}]}]}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now consider adding additional parameters that are not present in the actual route filename:"}]},{"type":"element","tag":"alert","props":{"type":"danger"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The params will be checked while building to validate the parameters are actually valid. If not, the build will fail."}]}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"import { Response, route, Status } from \"svarta\";\n\n// another_param is defined, but not defined in the route filename.\n// This will show a warning while developing, and will fatally error during build\nexport const params = [\"name\", \"another_param\"] as const;\n\nexport default route\n  .params(params)\n  .handle(async ({ params }) => {\n    const { name } = params;\n\n    return new Response(Status.Ok, {\n      message: `Hello ${name}!`,\n    });\n  });\n","filename":"routes/hello/[name].get.ts","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { Response, route, Status } from \"svarta\";\n\n// another_param is defined, but not defined in the route filename.\n// This will show a warning while developing, and will fatally error during build\nexport const params = [\"name\", \"another_param\"] as const;\n\nexport default route\n  .params(params)\n  .handle(async ({ params }) => {\n    const { name } = params;\n\n    return new Response(Status.Ok, {\n      message: `Hello ${name}!`,\n    });\n  });\n"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"redirects"},"children":[{"type":"text","value":"Redirects"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Redirect"}]},{"type":"text","value":" is a helper class that wraps the standard "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Response"}]},{"type":"text","value":" class for easier redirect handling."}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"import { Redirect, route } from \"svarta\";\n\nexport default route.handle(async () => {\n  return new Redirect(\"https://google.com\", true /* permanent */);\n});\n","filename":"routes/index.get.ts","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { Redirect, route } from \"svarta\";\n\nexport default route.handle(async () => {\n  return new Redirect(\"https://google.com\", true /* permanent */);\n});\n"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"route-input-reference"},"children":[{"type":"text","value":"Route input reference"}]},{"type":"element","tag":"h3","props":{"id":"ctx"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ctx"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"User-provided context. This can be set by using "},{"type":"element","tag":"a","props":{"href":"/usage/middlewares"},"children":[{"type":"text","value":"middlewares"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h3","props":{"id":"path"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"path"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Full path without the query parameters."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Example: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/user?id=3"}]},{"type":"text","value":" => "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/user"}]}]},{"type":"element","tag":"h3","props":{"id":"url"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"url"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Full path with query parameters."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Example: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/user?id=3"}]},{"type":"text","value":" => "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/user?id=3"}]}]},{"type":"element","tag":"h3","props":{"id":"method"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"method"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"HTTP method ("},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"POST"}]},{"type":"text","value":", etc)."}]},{"type":"element","tag":"h3","props":{"id":"headers"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"headers"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Can be used to get and set HTTP headers."}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"import { Redirect, Response, route, Status } from \"svarta\";\n\nexport default route.handle(async ({ headers }) => {\n  if (!headers.get(\"authorization\")) {\n    return new Redirect(\"/\", false);\n  }\n  headers.set(\"content-type\", \"application/yaml\");\n  return new Response(Status.Ok, \"message: welcome to the secret page\");\n});\n","filename":"routes/secret.get.ts","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { Redirect, Response, route, Status } from \"svarta\";\n\nexport default route.handle(async ({ headers }) => {\n  if (!headers.get(\"authorization\")) {\n    return new Redirect(\"/\", false);\n  }\n  headers.set(\"content-type\", \"application/yaml\");\n  return new Response(Status.Ok, \"message: welcome to the secret page\");\n});\n"}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"input"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"input"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Input body. Use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"route.input"}]},{"type":"text","value":" to define an input, which will automatically validated before your route handler runs. See "},{"type":"element","tag":"a","props":{"href":"#input-validation"},"children":[{"type":"text","value":"above"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h3","props":{"id":"params"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"params"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Route parameters. See "},{"type":"element","tag":"a","props":{"href":"#route-parameters"},"children":[{"type":"text","value":"above"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h3","props":{"id":"query"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"query"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Route query parameters."}]},{"type":"element","tag":"h3","props":{"id":"isdev"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"isDev"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Development flag, which is "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"true"}]},{"type":"text","value":" if the app is run in development mode."}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"import { Response, route, Status } from \"svarta\";\n\nexport default route.handle(async ({ headers, isDev }) => {\n  if (!isDev) {\n    logRequest();\n  }\n\n  return new Response(Status.Ok, {\n    message: \"hello\",\n  });\n});\n","filename":"routes/index.get.ts","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { Response, route, Status } from \"svarta\";\n\nexport default route.handle(async ({ headers, isDev }) => {\n  if (!isDev) {\n    logRequest();\n  }\n\n  return new Response(Status.Ok, {\n    message: \"hello\",\n  });\n});\n"}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"cookies"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"cookies"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Can be used to get and set HTTP cookies."}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"import { Redirect, Response, route, Status } from \"svarta\";\n\nexport default route.handle(async ({ cookies }) => {\n  const session = cookies.get(\"session\");\n  if (!session) {\n    return new Redirect(\"/\", false);\n  };\n\n  const user = await getUser(session);\n  if (!user) {\n    return new Redirect(\"/\", false);\n  }\n\n  cookies.set(\"session\", generateSession(), {\n    httpOnly: true\n    // additional cookie parameters here\n    // the options parameter is optional\n  });\n\n  return new Response(Status.Ok, {\n    message: \"You are signed in\"\n  });\n});\n","filename":"routes/dashboard.get.ts","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { Redirect, Response, route, Status } from \"svarta\";\n\nexport default route.handle(async ({ cookies }) => {\n  const session = cookies.get(\"session\");\n  if (!session) {\n    return new Redirect(\"/\", false);\n  };\n\n  const user = await getUser(session);\n  if (!user) {\n    return new Redirect(\"/\", false);\n  }\n\n  cookies.set(\"session\", generateSession(), {\n    httpOnly: true\n    // additional cookie parameters here\n    // the options parameter is optional\n  });\n\n  return new Response(Status.Ok, {\n    message: \"You are signed in\"\n  });\n});\n"}]}]}]}]}]},"_type":"markdown","_id":"content:2.usage:0.routes.md","_source":"content","_file":"2.usage/0.routes.md","_extension":"md"},{"_path":"/usage/config","_dir":"usage","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Configuration","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"configuration"},"children":[{"type":"text","value":"Configuration"}]},{"type":"element","tag":"h2","props":{"id":"example"},"children":[{"type":"text","value":"Example"}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"/**\n * @type {import(\"@svarta/cli\").Config}\n */\nconst config = {\n  packageManager: \"npm\",\n  routeFolder: \"routes\",\n  minify: true,\n  adapter: ADAPTER,\n};\n\nexport default config;\n","filename":"svarta.config.mjs","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"/**\n * @type {import(\"@svarta/cli\").Config}\n */\nconst config = {\n  packageManager: \"npm\",\n  routeFolder: \"routes\",\n  minify: true,\n  adapter: ADAPTER,\n};\n\nexport default config;\n"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"reference"},"children":[{"type":"text","value":"Reference"}]},{"type":"element","tag":"h3","props":{"id":"routefolder"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"routeFolder"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Default: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"\"routes\""}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The base folder from which all routes are loaded and based on."}]},{"type":"element","tag":"h3","props":{"id":"minify"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"minify"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Default: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"true"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Minifies your code to reduce bundle size."}]},{"type":"element","tag":"h3","props":{"id":"adapter"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"adapter"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The chosen adapter determines to which platform you want to deploy your server to. "},{"type":"element","tag":"a","props":{"href":"/adapters"},"children":[{"type":"text","value":"More info here"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h3","props":{"id":"packagemanager"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"packageManager"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Your preferred package manager."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Allowed values: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"yarn"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"pnpm"}]}]}]},"_type":"markdown","_id":"content:2.usage:2.config.md","_source":"content","_file":"2.usage/2.config.md","_extension":"md"}]