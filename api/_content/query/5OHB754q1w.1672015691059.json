[{"_path":"/usage/middlewares","_dir":"usage","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Middlewares","description":"To create a middleware, use route.middleware. The callback is your middleware function and can access all the info a route can. By returning an object you can add context your route can later consume.","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"middlewares"},"children":[{"type":"text","value":"Middlewares"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To create a middleware, use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"route.middleware"}]},{"type":"text","value":". The callback is your middleware function and can access all the info a route can. By returning an object you can add context your route can later consume."}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"import { Response, route, Status } from \"svarta\";\n\nconst protectedRoute = route.middleware(async ({ headers, ctx }) => {\n  const authHeader = headers.get(\"authorization\");\n\n  if (!authHeader) {\n    return new Response(Status.Unauthorized);\n  }\n\n  const user = await getUser(authHeader);\n\n  return {\n    ...ctx,\n    user,\n  };\n});\n\nexport default protectedRoute.handle(async ({ ctx }) => {\n  return new Response(Status.Ok, {\n    user: ctx.user,\n  });\n});\n","filename":"routes/index.get.ts","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { Response, route, Status } from \"svarta\";\n\nconst protectedRoute = route.middleware(async ({ headers, ctx }) => {\n  const authHeader = headers.get(\"authorization\");\n\n  if (!authHeader) {\n    return new Response(Status.Unauthorized);\n  }\n\n  const user = await getUser(authHeader);\n\n  return {\n    ...ctx,\n    user,\n  };\n});\n\nexport default protectedRoute.handle(async ({ ctx }) => {\n  return new Response(Status.Ok, {\n    user: ctx.user,\n  });\n});\n"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"chaining-middlewares"},"children":[{"type":"text","value":"Chaining middlewares"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can chain middlewares by calling "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".middleware"}]},{"type":"text","value":" on another middleware. This will return a new middleware."}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"import { Response, route, Status } from \"svarta\";\n\n// See example above for \"protectedRoute\"\nconst signedRoute = protectedRoute.middleware(async ({ headers, ctx }) => {\n  headers.set(\"x-my-header\", \"abc\");\n  return ctx;\n})\n\nexport default protectedRoute.handle(async ({ ctx }) => {\n  return new Response(Status.Ok, {\n    user: ctx.user,\n  });\n});\n","filename":"routes/index.get.ts","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { Response, route, Status } from \"svarta\";\n\n// See example above for \"protectedRoute\"\nconst signedRoute = protectedRoute.middleware(async ({ headers, ctx }) => {\n  headers.set(\"x-my-header\", \"abc\");\n  return ctx;\n})\n\nexport default protectedRoute.handle(async ({ ctx }) => {\n  return new Response(Status.Ok, {\n    user: ctx.user,\n  });\n});\n"}]}]}]}]}]},"_type":"markdown","_id":"content:2.usage:1.middlewares.md","_source":"content","_file":"2.usage/1.middlewares.md","_extension":"md"},{"_path":"/usage/cli","_dir":"usage","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Command line tool","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"command-line-tool"},"children":[{"type":"text","value":"Command line tool"}]},{"type":"element","tag":"h2","props":{"id":"install"},"children":[{"type":"text","value":"Install"}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"npm i -g @svarta/cli\n","filename":"terminal","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm i -g @svarta/cli\n"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"help"},"children":[{"type":"text","value":"Help"}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"svarta help\nsvarta [command] --help\n","filename":"terminal","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"svarta help\nsvarta [command] --help\n"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"scaffold-new-project"},"children":[{"type":"text","value":"Scaffold new project"}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"svarta init --manager [npm,yarn,pnpm]\n","filename":"terminal","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"svarta init --manager [npm,yarn,pnpm]\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Same as "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"create svarta-app"}]}]},{"type":"element","tag":"h2","props":{"id":"run-development-server"},"children":[{"type":"text","value":"Run development server"}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"svarta dev\n","filename":"terminal","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"svarta dev\n"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"build-server"},"children":[{"type":"text","value":"Build server"}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"svarta build\n","filename":"terminal","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"svarta build\n"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"deploy-server"},"children":[{"type":"text","value":"Deploy server"}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"svarta deploy\n","filename":"terminal","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"svarta deploy\n"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"show-version"},"children":[{"type":"text","value":"Show version"}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"svarta --version\n","filename":"terminal","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"svarta --version\n"}]}]}]}]}]},"_type":"markdown","_id":"content:2.usage:3.cli.md","_source":"content","_file":"2.usage/3.cli.md","_extension":"md"}]